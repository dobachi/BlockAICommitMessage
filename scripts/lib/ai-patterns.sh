#!/bin/bash

# AIコミットメッセージパターン定義
# 検出パターンの中央管理

# AI署名パターン
declare -a AI_SIGNATURES=(
    "🤖"
    "🤖 Generated with"
    "Co-Authored-By: Claude"
    "Co-Authored-By: GPT"
    "Co-Authored-By: Gemini"
    "Co-Authored-By: Copilot"
    "Co-Authored-By: Bard"
    "Generated by AI"
    "AI-generated"
    "Auto-generated by"
    "Automatically generated"
    "[AI]"
    "[Bot]"
    "[AUTO]"
    "noreply@anthropic.com"
    "noreply@openai.com"
    "noreply@github.com"
    "claude.ai"
    "openai.com"
)

# AIメッセージの構造パターン（正規表現）
declare -a AI_STRUCTURAL_PATTERNS=(
    # Conventional Commits形式の過度な使用
    "^(feat|fix|docs|style|refactor|test|chore|perf|build|ci)(\([a-zA-Z0-9_-]+\))?: [A-Z][a-z]+ .+"
    
    # 典型的なAI説明パターン
    "^This (commit|change|update|patch) .+"
    "^Update.* to .* for .+"
    "^Refactor.* to improve .+"
    "^Implement.* functionality for .+"
    "^Add.* support for .+"
    "^Fix.* issue with .+"
    "^Enhance.* by .+"
    "^Optimize.* for better .+"
    
    # 箇条書きパターン（3つ以上の項目）
    "^- .+\n- .+\n- .+"
    "^\\* .+\n\\* .+\n\\* .+"
    "^[0-9]\. .+\n[0-9]\. .+\n[0-9]\. .+"
)

# 形式的な語彙リスト
declare -a FORMAL_VOCABULARY=(
    "enhance"
    "optimize"
    "streamline"
    "implement"
    "incorporate"
    "facilitate"
    "utilize"
    "leverage"
    "establish"
    "ensure"
    "maintain"
    "provide"
    "enable"
    "configure"
    "integrate"
    "consolidate"
    "standardize"
    "modernize"
    "restructure"
    "ameliorate"
)

# AIツール特有のフレーズ
declare -a AI_SPECIFIC_PHRASES=(
    "for better maintainability"
    "to improve readability"
    "for enhanced performance"
    "to ensure consistency"
    "following best practices"
    "adhering to standards"
    "in accordance with"
    "as per requirements"
    "to facilitate future"
    "for optimal results"
)

# 検出スコアの重み付け
declare -A DETECTION_WEIGHTS=(
    ["signature"]=100        # AI署名（即座に検出）
    ["structural"]=50        # 構造パターン
    ["vocabulary"]=20        # 形式的語彙
    ["phrase"]=30           # AI特有フレーズ
    ["grammar"]=15          # 文法的完璧さ
    ["list"]=25             # 箇条書き形式
)

# 検出閾値
DETECTION_THRESHOLD=80

# パターンマッチング関数
matches_pattern() {
    local text="$1"
    local pattern="$2"
    
    # Perl正規表現が使える場合は使用、そうでなければ基本的な正規表現
    if command -v perl >/dev/null 2>&1; then
        echo "$text" | perl -ne "exit 0 if /$pattern/; exit 1" 2>/dev/null
    else
        echo "$text" | grep -Eq "$pattern" 2>/dev/null
    fi
    
    return $?
}

# 形式的語彙のカウント関数
count_formal_words() {
    local text="$1"
    local count=0
    
    for word in "${FORMAL_VOCABULARY[@]}"; do
        local word_count=$(echo "$text" | grep -io "$word" | wc -l)
        count=$((count + word_count))
    done
    
    echo $count
}

# AI特有フレーズの検出関数
detect_ai_phrases() {
    local text="$1"
    local found=0
    
    for phrase in "${AI_SPECIFIC_PHRASES[@]}"; do
        if echo "$text" | grep -qi "$phrase"; then
            found=$((found + 1))
        fi
    done
    
    echo $found
}